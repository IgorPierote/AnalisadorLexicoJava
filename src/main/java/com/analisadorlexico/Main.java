package com.analisadorlexico;

import java.io.IOException;
import java.io.StringReader;
import java.util.Scanner;
import java.util.InputMismatchException;

public class Main {

    /**
     * Realiza a valida√ß√£o matem√°tica de um n√∫mero de CPF.
     */
    private static boolean validarCPF(String cpf) {
        cpf = cpf.replace(".", "").replace("-", "");

        if (cpf.length() != 11 || cpf.matches("(\\d)\\1{10}")) {
            return false;
        }

        char dig10, dig11;
        int sm, i, r, num, peso;

        try {
            sm = 0;
            peso = 10;
            for (i = 0; i < 9; i++) {
                num = (int) (cpf.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11)) {
                dig10 = '0';
            } else {
                dig10 = (char) (r + 48);
            }

            sm = 0;
            peso = 11;
            for (i = 0; i < 10; i++) {
                num = (int) (cpf.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11)) {
                dig11 = '0';
            } else {
                dig11 = (char) (r + 48);
            }

            return (dig10 == cpf.charAt(9)) && (dig11 == cpf.charAt(10));

        } catch (InputMismatchException erro) {
            return false;
        }
    }

    /**
     * Realiza a valida√ß√£o matem√°tica de um n√∫mero de RG (Padr√£o SP).
     */
    private static boolean validarRG(String rg) {
        // 1. Remove a m√°scara e coloca o 'X' em mai√∫sculo para consist√™ncia
        rg = rg.replace(".", "").replace("-", "").toUpperCase();

        // 2. Verifica se o RG tem 9 caracteres
        if (rg.length() != 9) {
            return false;
        }

        try {
            // 3. C√°lculo do d√≠gito verificador
            int soma = 0;
            // Multiplica os 8 primeiros d√≠gitos pelos pesos (2, 3, 4, 5, 6, 7, 8, 9)
            for (int i = 0; i < 8; i++) {
                soma += Character.getNumericValue(rg.charAt(i)) * (i + 2);
            }

            // O d√≠gito verificador √© 11 menos o resto da divis√£o da soma por 11
            int resultado = 11 - (soma % 11);
            char digitoCalculado;
            
            if (resultado == 10) {
                digitoCalculado = 'X';
            } else if (resultado == 11) {
                digitoCalculado = '0';
            } else {
                digitoCalculado = (char) (resultado + '0'); // Converte o n√∫mero para char
            }

            // 5. Compara o d√≠gito calculado com o d√≠gito real do RG
            return rg.charAt(8) == digitoCalculado;

        } catch (Exception e) {
            // Se ocorrer qualquer erro (ex: char n√£o num√©rico), a valida√ß√£o falha
            return false;
        }
    }

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);

        System.out.println("--- Bem-vindo ao Analisador L√©xico Interativo ---");
        System.out.println("\n[INFO] O que √© um Analisador L√©xico?");
        System.out.println("√â a primeira fase de um compilador. Ele l√™ o c√≥digo-fonte como uma sequ√™ncia de caracteres");
        System.out.println("e o converte em uma sequ√™ncia de 'tokens' (as 'palavras' da linguagem), descartando o que n√£o √© essencial, como espa√ßos e coment√°rios.");
        System.out.println("\n[INFO] Como funciona?");
        System.out.println("1. Regras: Usamos um arquivo (.flex) para definir padr√µes com express√µes regulares (ex: um n√∫mero √© uma sequ√™ncia de d√≠gitos).");
        System.out.println("2. Gera√ß√£o: Uma ferramenta (JFlex) l√™ essas regras e gera um programa em Java (Lexer.java) que sabe como reconhecer esses padr√µes.");
        System.out.println("3. Execu√ß√£o: Este programa que voc√™ est√° usando chama o analisador gerado para dividir sua entrada em tokens.");
        System.out.println("\n-------------------------------------------------");
        System.out.println("\nDigite um c√≥digo para analisar. Para testar, insira um CPF ou RG (com ou sem m√°scara).");
        System.out.println("Para sair, digite 'sair'.");

        while (true) {
            System.out.print("\n> ");
            String input = scanner.nextLine();

            if ("sair".equalsIgnoreCase(input)) {
                System.out.println("üëã Encerrando o analisador.");
                break;
            }

            if (input.trim().isEmpty()) {
                continue;
            }

            System.out.println("\nüîé An√°lise L√©xica da entrada: '" + input + "'");
            Lexer lexer = new Lexer(new StringReader(input));
            String token;
            boolean hasTokens = false;

            while ((token = lexer.yylex()) != null) {
                hasTokens = true;
                System.out.println("  -> Token reconhecido: " + token);

                // Valida√ß√£o Sem√¢ntica para CPF
                if (token.startsWith("CPF_VALIDO(")) {
                    String cpf = token.substring(11, token.length() - 1);
                    System.out.println("    [VALIDA√á√ÉO SEM√ÇNTICA] O token parece um CPF. Validando matematicamente...");
                    if (validarCPF(cpf)) {
                        System.out.println("    [RESULTADO] ‚úÖ O CPF " + cpf + " √© V√ÅLIDO!");
                    } else {
                        System.out.println("    [RESULTADO] ‚ùå O CPF " + cpf + " √© INV√ÅLIDO!");
                    }
                }

                // Valida√ß√£o Sem√¢ntica para RG
                if (token.startsWith("RG_VALIDO(")) {
                    String rg = token.substring(10, token.length() - 1);
                    System.out.println("    [VALIDA√á√ÉO SEM√ÇNTICA] O token parece um RG. Validando matematicamente (padr√£o SP)...");
                    if (validarRG(rg)) {
                        System.out.println("    [RESULTADO] ‚úÖ O RG " + rg + " √© V√ÅLIDO!");
                    } else {
                        System.out.println("    [RESULTADO] ‚ùå O RG " + rg + " √© INV√ÅLIDO!");
                    }
                }
            }

            if (!hasTokens) {
                System.out.println("  Nenhum token foi reconhecido (a entrada pode conter apenas espa√ßos ou coment√°rios).");
            }

            System.out.println("‚úÖ An√°lise conclu√≠da.");
        }

        scanner.close();
    }
}
